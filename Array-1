#include <stdio.h>
#include <stdbool.h>

bool sameFirstLast(int *nums[]){
    int len = sizeof(nums)/sizeof(nums[0]);
    if(nums[0]==nums[len-1]) return true;
    return false;
}
int main(){
    int arr[]={2,5,6,7,1,9,2};
    if (sameFirstLast(arr)==true) printf("same first last!");
    else printf("not same first last!");
}

#include <stdio.h>
#include <stdbool.h>

//Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.
int arr[];
void makepie(){
    arr[0]=3;
    arr[1]=1;
    arr[2]=4;
}
int *main(){
    makepie();
    for(int i=0;i<3;i++){
        printf("%d ",arr[i]);
    }
    return 0;
}

#include <stdio.h>
#include <stdbool.h>

//Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.

bool commonEnd(int a[],int len, int b[],int len1){
    if(len==0||len1==0) return false;
    if(a[len-1]==b[len1-1]) return true;
    return false;
}
int main(){
    int arr[5]={3,3,5,1,2};
    int arr1[6]={};
    
    int len=sizeof(arr)/sizeof(arr[0]);
    int len1=sizeof(arr1)/sizeof(arr1[0]);    
    if(commonEnd(arr,len,arr1,len1)==true) printf("common ends!");
    else printf("not common ends!");
} 

#include<stdio.h>

int main(){
    int arr[5]={3,3,5,1,2};
    int len=sizeof(arr)/sizeof(arr[0]);
    for(int i=len-1;i>=len/2;i--){
        int t=arr[i];
        arr[i]=arr[len-1-i];
        arr[len-1-i]=t;
    }
    for(int i=0;i<len;i++){
        printf("%d ",arr[i]);
    }
    return 0;
}

#include<stdio.h>
void middleway(int a[], int b[],int ans[]){
    ans[0]=a[1];
    ans[1]=b[1];
}
int main(){
    int arr[5]={3,3,5};
    int arr1[6]={3,8,9};
    int ans[2];
    middleway(arr,arr1,ans);
    for(int i=0;i<2;i++){
        printf("%d ",ans[i]);
    }

} 

#include<stdio.h>
int sum(int a[]){
    int sum=0;
    for(int i=0;i<=2;i++){
        sum+=a[i];
    }
    return sum;
}
int main(){
    int arr[5]={3,3,5};
    printf("%d ",sum(arr));
    return 0;

} 
#include<stdio.h>
void rotateLeft(int a[]){
    int t=a[0];
    for(int i=0;i<2;i++){
        a[i]=a[(i+1)];
    }
    a[2]=t;
}
int main(){
    int arr[3]={2,3,5};
    rotateLeft(arr);
    for(int i=0;i<=2;i++){
        printf("%d ",arr[i]);
    }

    return 0;

} 



9) Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.
#include <stdio.h>
int sum2(int arr[]){
    return arr[0]+arr[1];    
}
int main(){
    int arr[]={2,7,3,9};
    printf("%d",sum2(arr));
    return 0;
}

10) either 2 or 3 

if(nums[0]== 2 || nums[1]==3 || nums[0]== 3 || nums[1]==2) return true;
  return false;

11)not 2 or 3
public boolean no23(int[] nums) {
  if(nums[0]== 2 || nums[1]==3 || nums[0]== 3 || nums[1]==2) return false;
  return true;
}

12) fix 23
int cnt=0;
  for(int i=1;i<3;i++){
    if(nums[i-1]==2 && nums[i]==3){
      nums[i]=0;
    } 
  }
  return nums;

13) Start with 2 int arrays, a and b, of any length. Return how many of the arrays have 1 as their first element.
int cnt=0;
  for(int i=0;i<a.length;i++){
    if(a[i]==1) cnt++; break;
  }
  for(int i=0;i<b.length;i++){
    if(b[i]==1) cnt++; break;
  }
  return cnt;

14)bigger two
int sum1=0, sum2=0;
  for(int i=0;i<2;i++){
    sum1+=a[i];
    sum2+=b[i];
  }
  if(sum1<sum2) return b;
  return a;

15) middle index
#include <stdio.h>

int* makeMiddle(int nums[], int size) {
  // Allocate memory for the new array of size 2
  int* middle_two = (int*)malloc(2 * sizeof(int));

  // Check if memory allocation was successful
  if (middle_two == NULL) {
    return NULL; // Indicate error
  }

  // Calculate middle index using integer division
  int middle_index = size / 2;

  // Extract elements from original array and store in new array
  middle_two[0] = nums[middle_index - 1];
  middle_two[1] = nums[middle_index];

  // Return the pointer to the new array
  return middle_two;
}

int main() {
  int arr1[] = {1, 2, 3, 4};
  int size1 = sizeof(arr1) / sizeof(arr1[0]);

  int* result1 = makeMiddle(arr1, size1);

  if (result1 != NULL) {
    printf("makeMiddle([1, 2, 3, 4]) -> [");
    printf("%d, %d]\n", result1[0], result1[1]);
    // Free the allocated memory to prevent memory leaks
    free(result1);
  } else {
    printf("Error allocating memory for the new array.\n");
  }

  // More test cases can be added here following the same structure

  return 0;
}

16) add two elements to first array 
  int* result = (int*)malloc(4 * sizeof(int));
  if (result == NULL) {
    return NULL; // Indicate error
  }
  result[0] = arr1[0];
  result[1] = arr1[1];
  result[2] = arr2[0];
  result[3] = arr2[1];
  return result;

17) swap ends 
int n= nums.length;
  int t=nums[n-1];
  nums[n-1]=nums[0];
  nums[0]=t;
  return nums;

18) middle three
int* result = (int*)malloc(3* sizeof(int));
int n=sizeof(nums)/sizeof(nums[0);
result[0] = arr1[n/2-1];
result[1] = arr1[n/2];
result[2] = arr2[n/2+1];

19) max of three
if (size == 1) {
    return nums[0];
  }

  // Calculate the middle index using integer division
  int middle_index = size / 2;

  // Find the maximum among first, last, and middle elements
  int max_element = nums[0];
  max_element = max_element > nums[middle_index] ? max_element : nums[middle_index];
  max_element = max_element > nums[size - 1] ? max_element : nums[size - 1];

  // Return the largest element
  return max_element;

20) Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.
int n=sizeof(nums)/sizeof(nums[0]);
if(n<=1) return nums;
int* ans = (int*)malloc(2* sizeof(int));
ans[0]=nums[0];
ans[1]=nums[1];
return ans;

21) We'll say that a 1 immediately followed by a 3 in an array is an "unlucky" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array.
  int n=sizeof(nums)/sizeof(nums[0]);
  if(n<=1) return false;
  for(int i=0;i<2;i++){
    if(nums[i]==1 && nums[i+1]==3) return true;
  }
  if(nums[n-2]==1 && nums[n-1]==3) return true;
  return false;

22) Given 2 int arrays, a and b, return a new array length 2 containing, as much as will fit, the elements from a followed by the elements from b. The arrays may be any length, including 0, but there will be 2 or more elements available between the 2 arrays.
  int n1=sizeof(a)/sizeof(a[0]);
  int n2=sizeof(b)/sizeof(b[0]);
 if(n1>=2) return new int[]{a[0],a[1]};
  if(n1==1) return new int[]{a[0],b[0]};
  return new int[]{b[0],b[1]};


23) Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array.
int n1= a.length;
  int n2= b.length;
  if(n1==0 && n2==0) return a;
  else if(n1==0) return new int[]{b[0]};
  else if(n2==0) return new int[]{a[0]};
  return new int[]{a[0],b[0]};
}
